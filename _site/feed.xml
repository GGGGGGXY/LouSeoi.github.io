<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GaoXinyu - Jungler</title>
    <description>I will do my best , god will do the rest 'maybe'</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 23 Apr 2017 14:02:41 +0800</pubDate>
    <lastBuildDate>Sun, 23 Apr 2017 14:02:41 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>PostgreSQL索引设计底层分析</title>
        <description>&lt;h1 id=&quot;2017-4-18&quot;&gt;2017-4-18&lt;/h1&gt; &lt;h1 id=&quot;索引&quot;&gt;索引&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;B-Tree索引 适合比较查询和范围查询，基于B+树建立索引，当使用(&amp;gt;,=,&amp;lt;,&amp;gt;=,&amp;lt;=)时优先考虑使用b+树。&lt;/li&gt; &lt;li&gt;Hash索引 哈希表，只适用于简单的(=)比较。&lt;/li&gt; &lt;li&gt;GiST索引 Generaized Search Tree通用技术搜索树 解释如下 &lt;blockquote&gt; &lt;p&gt;通用搜索树是一棵平衡树，除根结点的扇出数在2和M之间外，每个节点的扇出数在kM和M之间，这里2/M&amp;lt;=k&amp;lt;=1/2。常量k称作该树的最小填充因子，M为一个结点可以容纳索引项的最大数目。索引项形式为（p，ptr），其中p是用作搜索码的谓词。在叶结点中，ptr为指向数据库中某一元组的指针；而在非叶结点中，ptr为指向其子树根结点的指针。谓词中可以包含自由变量，只要相应子树中叶结点标识的所有元组能实例化这些变量即可。&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;li&gt;GIN索引 Generalized Inverted Tree倒排索引 &lt;blockquote&gt; &lt;p&gt;倒排索引源于实际应用中需要根据属性的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引(inverted index)。带有倒排索引的文件我们称为倒排索引文件，简称倒排文件&lt;/p&gt; &lt;h1 id=&quot;索引方式&quot;&gt;索引方式&lt;/h1&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;li&gt;唯一索引 UNIQUE修饰的关键字，只有B-Tree支持唯一索引&lt;/li&gt; &lt;li&gt;主键索引 主键有UNIQUE属性，是一种特殊的唯一索引&lt;/li&gt; &lt;li&gt;多属性索引 索引定义在多个属性上，就称作多属性索引，常用于多属性查询。B-Tree，GiST，GIN都支持。&lt;/li&gt; &lt;li&gt;部分索引 对表中一部分元组设立索引 &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE INDEX stu_name_idx ON student(name) WHERE (id &amp;gt; 1 and id &amp;lt; 255); &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt;表达式索引 只有使用相同的表达式时才能使用的索引。 默认都使用B-Tree &lt;h1 id=&quot;系统表&quot;&gt;系统表&lt;/h1&gt; &lt;p&gt;在PostgreSQL中，每种索引类型都在pg_am(access method)中用元组记录好了，其中包括该索引提供的访问函数。函数来源于pg_proc系统表中注册的函数。元组中还提供索引类型的一些特性，具体table内容如下。 ghost居然不支持表格语法，很痛苦，回去捣鼓捣鼓，先凑合凑合&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;名称&lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;类型&lt;/th&gt; &lt;th style=&quot;text-align: center&quot;&gt;引用&lt;/th&gt; &lt;th&gt;说明&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;amname&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;name&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt; &lt;td&gt;索引类型名称&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;amstrategies&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt;int2&lt;/td&gt; &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt; &lt;td&gt;支持的操作符类的数目&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;...</description>
        <pubDate>Tue, 18 Apr 2017 23:12:32 +0800</pubDate>
        <link>http://localhost:4000/db/</link>
        <guid isPermaLink="true">http://localhost:4000/db/</guid>
        
        <category>coding for fun</category>
        
        
        <category>Learn</category>
        
      </item>
    
      <item>
        <title>Unix FileSystem project</title>
        <description>&lt;h1 id=&quot;项目简述&quot;&gt;项目简述&lt;/h1&gt; &lt;p&gt;这个项目是要构建一个二级文件系统并可以从这个系统盘中成功读取/加入文件/引导Unix v6++,简而言之就是写一个棒棒哒System.img文件。&lt;/p&gt; &lt;h1 id=&quot;整体架构&quot;&gt;整体架构&lt;/h1&gt; &lt;h2 id=&quot;filesystem-文件系统主体实现部分&quot;&gt;FileSystem 文件系统主体实现部分&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;  DataBlock.h 数据块管理块&lt;/li&gt; &lt;li&gt;  Directary.h 文件目录管理块&lt;/li&gt; &lt;li&gt;  InodeBlock.h Inode管理块&lt;/li&gt; &lt;li&gt;  Superblock.h 超级块管理 &lt;h4 id=&quot;filetype-文件系统中的文件基础类型&quot;&gt; FileType 文件系统中的文件基础类型&lt;/h4&gt; &lt;/li&gt; &lt;li&gt;  File.h 文件基类&lt;/li&gt; &lt;li&gt;  CommonFile.h 普通文件 派生类&lt;/li&gt; &lt;li&gt;  DevFile.h 设备文件 派生类&lt;/li&gt; &lt;li&gt;  DirFile.h 目录文件 派生类 &lt;h2 id=&quot;rwfile-引导文件的写入操作&quot;&gt;RWFile 引导文件的写入操作&lt;/h2&gt; &lt;/li&gt; &lt;li&gt;  Boot.h Boot文件写入&lt;/li&gt; &lt;li&gt;  Kernel.h Boot文件写入&lt;/li&gt; &lt;li&gt;  RWFile.h 封装文件的读写操作&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;挖坑日后填&lt;/p&gt; &lt;h3 id=&quot;17-4-10补坑&quot;&gt;17-4-10补坑&lt;/h3&gt; &lt;h4 id=&quot;引导文件模块的设计&quot;&gt;引导文件模块的设计&lt;/h4&gt; &lt;p&gt;RWFile.h -&amp;gt; 作为一个封装了基本文件操作（包括打开关闭文件、读写操作），设计的接口如下：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protected: string fileName; //要打开的文件名字 public: FILE *fileStream; //打开的文件的指针 long diskSize; //数据磁盘大小 RWFiles(string in); //构造函数 bool OpenFile(); //打开文件 void CloseFile(); //关闭文件 void WriteFile(byte *buf, int offset, int size); //将大小为size的buf写入文件中，偏移量offset void ReadFile(byte *buf, int offset,int size); //读文件 void SeekPositon(long offset, int postion); //将文件指针从postion的位置偏移offset的量 void ConvertPosition(int block, int offset);...</description>
        <pubDate>Sat, 15 Apr 2017 20:54:43 +0800</pubDate>
        <link>http://localhost:4000/unixfs/</link>
        <guid isPermaLink="true">http://localhost:4000/unixfs/</guid>
        
        <category>coding for fun</category>
        
        
        <category>Learn</category>
        
      </item>
    
      <item>
        <title>携程面经</title>
        <description>&lt;h1 id=&quot;做题&quot;&gt;做题&lt;/h1&gt; &lt;p&gt;刚进门给我一张表给我四页的题目，叫我开始做题，半个小时。&lt;/p&gt; &lt;h1 id=&quot;面试&quot;&gt;面试&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;面试官来了，叫我讲讲刚刚做的题目，第一题排列组合，很简单，第二道题，也是排列组合，然后是算2017组成的所有四位数的和，我是暴力的枚举计算的，最后居然算错了，正确的方法应该是千位1、2、7六种情况6&lt;em&gt;（1+2+7）&lt;/em&gt;1000，百位也这样计算，最后减去0开头的情况的数即可。&lt;/li&gt; &lt;li&gt;第四题，25匹马，找出速度最快的马，每次最多5匹马比赛。这题的思路应该是分五组跑，然后取每组的第一名再跑一次，取出第一名，这一定是跑的最快的，然后让第二名那一组的前二名和第三名跟跟第一名那一组的二三名跑，得出的前二名即可，共7次。&lt;/li&gt; &lt;li&gt;后面的选择题全是java，看不懂= =&lt;/li&gt; &lt;li&gt;最后算法题，是一个循环排序数组，查找某个数是否在数组中，原来刷过，主要思想是二分查找，废话不多说，直接上代码。 &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int erfen(int start, int end, vector&amp;lt;int&amp;gt; &amp;amp;nums, int target) { if (start &amp;gt;= end) return nums[start] == target ? start : -1; int mid = (start + end) / 2; if (nums[mid] == nums[start]) return erfen(start + 1, end, nums, target); else if (nums[mid] &amp;gt; nums[start]) { if (target &amp;lt;= nums[mid] &amp;amp;&amp;amp; target &amp;gt;= nums[start] ) return erfen(start, mid-1, nums, target); else return erfen(mid+1, end, nums, target); } else if (nums[mid] &amp;lt; nums[start]) { if (target &amp;gt;= nums[mid] &amp;amp;&amp;amp; target &amp;lt;= nums[end] ) return erfen(mid+1,end, nums, target);...</description>
        <pubDate>Thu, 13 Apr 2017 05:32:12 +0800</pubDate>
        <link>http://localhost:4000/testofxc/</link>
        <guid isPermaLink="true">http://localhost:4000/testofxc/</guid>
        
        <category>Experience</category>
        
        
        <category>Experience</category>
        
      </item>
    
      <item>
        <title>note of Computer System</title>
        <description>&lt;h1 id=&quot;进程的状态&quot;&gt;进程的状态&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;三种基本状态： 1.就绪态：当进程已分配到除CPU以外的所有必要的资源，给他一个CPU立马可以起飞，就成为就绪态。 2.执行态：在处理机上运行。 3.阻塞状态：正在执行的进程，等待某个事件发生无法执行时，变放弃处理。例如：等待io，申请缓冲区失败，等待信号。&lt;/li&gt; &lt;li&gt;进程转换： 1.就绪-&amp;gt;执行：获得了处理器 2.执行-&amp;gt;就绪：时间片用完，进程调度 3.执行-&amp;gt;阻塞：发生某种事件无法继续执行 4.阻塞-&amp;gt;就绪：等待的事件已经完成 &lt;h1 id=&quot;进程和线程的区别联系&quot;&gt;进程和线程的区别联系&lt;/h1&gt; &lt;/li&gt; &lt;li&gt;进程： 是并发执行的程序在执行过程中分配和管理资源的基本单位，是一个动态概念，竞争计算机资源的基本单位，每一个进程都有自己的地址空间，进程空间。进程空间的大小只与处理机的位数有关，一个长16位的处理器的进程空间的大小为216，而32位的为232。&lt;/li&gt; &lt;li&gt;线程： 在网络或多用户的环境下，一个服务器通常需要接受大量且不确定数量的用户请求，为每一个请求都创建进程行不通，系统开销和效率都不实际。线程是进程的一部分，一个没有线程的进程可以被看做是单线程。&lt;/li&gt; &lt;li&gt;联系与区别： 线程的改变只代表CPU执行过程的改变，而没有发生进程所拥有的资源变换。进程拥有一个完整的虚拟地址空间，不依赖线程而独立存在；而线程是进程的一部分，没有自己的地址空间，与进程内的其他线程一起共享分配给进程的所有资源。&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;进程间通信&quot;&gt;进程间通信&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;匿名管道 父子进程之间&lt;/li&gt; &lt;li&gt;命名管道&lt;/li&gt; &lt;li&gt;信号&lt;/li&gt; &lt;li&gt;共享内存&lt;/li&gt; &lt;li&gt;套接字 socket&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;进程同步&quot;&gt;进程同步&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;互斥锁&lt;/li&gt; &lt;li&gt;条件变量&lt;/li&gt; &lt;li&gt;信号量&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;用户态和核心态&quot;&gt;用户态和核心态&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;用户态：只能受限的访问内存&lt;/li&gt; &lt;li&gt;核心态：cpu可以访问内存所有数据，包括外围设备，也可以将自己从一个程序切换到另一个程序。&lt;/li&gt; &lt;li&gt;切换过程：用户程序在用户态运行，但是有时候需要做一些内核态做的事情，程序就需要向操作系统请求执行这些操作，这时候就需要用户态切换到内核态。系统调用。 1.用户态将数值放在寄存器中，或者创建一个堆栈，表明需要的服务。 2.用户态执行陷阱命令。 3.CPU切换到内核态，并跳转到位于内存指定位置的命令，用户态程序无法访问。 4.执行程序请求的服务。 5.系统调用完成，重置cpu为用户态并返回系统调用的结果。&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;内核栈和用户栈&quot;&gt;内核栈和用户栈&lt;/h1&gt; &lt;p&gt;内核在创建进程的时候，创建两个堆栈，分别用于用户态运行和核心态运行。&lt;/p&gt; &lt;h1 id=&quot;内存池进程池线程池&quot;&gt;内存池，进程池，线程池&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;内存池：用new，malloc分配内存时，申请的内存块大小不定，会造成大量的内存碎片降低性能。内存池就是在使用内存前，申请分配一定数量，大小相等的内存块留做备用，使得内存分配效率得到提升。&lt;/li&gt; &lt;li&gt;进程池：服务器预先创建一组子进程，子进程运行着相同的代码，相同的属性，当有新的任务来临时，主进程通过某种方式选择进程池中一个进程为其服务。&lt;/li&gt; &lt;li&gt;线程池：需要大量线程来完成任务，且实现任务的时间比较短，适合用线程池，节约创建线程的时间。&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;死锁的概念和原因&quot;&gt;死锁的概念和原因&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;死锁：进程集合中的每一个进程都在等待一个进程才能继续执行，无外力无法推进，这种就叫死锁。&lt;/li&gt; &lt;li&gt;互斥条件：分配到的资源不共享&lt;/li&gt; &lt;li&gt;请求和保持条件：请求不到资源，但仍保持自己的资源不放。&lt;/li&gt; &lt;li&gt;不可剥夺条件：进程在使用完资源前不可以被剥夺资源&lt;/li&gt; &lt;li&gt;环路等待：必然存在一个环路。&lt;/li&gt; &lt;li&gt;解决方法： 1.预防死锁：破坏条件 2.避免死锁：银行家 3.检测死锁：发生发生死锁，立马干预 4.解除死锁：配合检测使用。&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;进程调度算法&quot;&gt;进程调度算法&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;先来先服务算法&lt;/li&gt; &lt;li&gt;短作业优先调度算法&lt;/li&gt; &lt;li&gt;优先权调度算法&lt;/li&gt; &lt;li&gt;时间片轮转法&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;内存管理的方式&quot;&gt;内存管理的方式&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;单一连续的存储管理方式： 内存被分为两个区域：系统区和用户区。应用程序装入到用户区，可使用用户区全部空间。其特点是简单，使用与单用户单任务的操作系统。不足在于程序全部装入内存，造成内存浪费。&lt;/li&gt; &lt;li&gt;分区式存储管理： 为了支持多道程序系统和分时系统，支持多个程序并发执行。将内存分为一些大小相等或者不等的分区，操作系统占用其中一个分区，其余的分区由应用程序使用，每个应用程序占用一个或者几个分区。缺点：内碎片（块内碎片）外碎片（块间碎片），限制了并发执行的程序数目。&lt;/li&gt; &lt;li&gt;页式存储管理： &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;原理：将程序的逻辑地址空间划分为固定大小的页，而无力内存划分为同样大小的页框，程序加载时，可以将任意一页放入内存中任意一个页框中，这些页框不用连续，实现了离散分配。 缺点：要求程序全部装入内存，没有足够内存就无法执行。 &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/li&gt; &lt;li&gt;段式存储管理：...</description>
        <pubDate>Fri, 07 Apr 2017 20:54:43 +0800</pubDate>
        <link>http://localhost:4000/system/</link>
        <guid isPermaLink="true">http://localhost:4000/system/</guid>
        
        <category>coding for fun</category>
        
        
        <category>Learn</category>
        
      </item>
    
      <item>
        <title>note of Network</title>
        <description>&lt;h1 id=&quot;电路交换&quot;&gt;电路交换&lt;/h1&gt; &lt;p&gt;电路交换是以电路连接为目的的交换方式，通信之前要在通信双方之间建立一条被双方独占的物理通道。 阶段：1）建立连接 2）通信 3）释放连接&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;优点： 1.双方用户专用，数据直达，延迟小。 2.建立通路后随时通信，实时性强。 3.双方通信时按发送顺序传送数据，不存在失序问题。 4.电路交换既适用传输模拟信号，也可以传输数字信号 5.设备控制简单&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;缺点： 1.建立连接时间长 2.信道利用率低 3.数据交换时终端匹配度要求高。&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;分组交换&quot;&gt;分组交换&lt;/h1&gt; &lt;p&gt;分组交换时以分组为单位进行传输和交换的，它是一种存储-转发交换方式，即将到达交换机的分组先送到存储器暂存再发送。&lt;/p&gt; &lt;ul&gt; &lt;li&gt;优点： 1.不需要建立专用通道，节约时间。 2.某条路径故障时还可以选择其他传输线路，提高传输效率。 3.提高信道利用率。 4.操作并行性。 5.分组较短，出错几率小。提高可靠性，减小延迟。&lt;/li&gt; &lt;li&gt;缺点： 1.存储的时候引起时延。 2.只能用数字信号。 3.会出现失序，丢失，重复分组。&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;osi七层结构从上到下&quot;&gt;OSI七层结构（从上到下）&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;应用层 -&amp;gt; 网络服务和使用者应用程序间的一个借口&lt;/li&gt; &lt;li&gt;表示层 -&amp;gt; 数据表示 数据安全 数据压缩&lt;/li&gt; &lt;li&gt;会话层 -&amp;gt; 会话层到传输层的映射;会话连接的流量控制;数据传输;会话连接恢复与释放;会话连接管理,差错控制&lt;/li&gt; &lt;li&gt;传输层 -&amp;gt; 用一个寻址机制来标志一个特定的应用程序(端口号)&lt;/li&gt; &lt;li&gt;网络层(路由器) -&amp;gt; 基于网络层地址(IP)进行不同网络系统间的路径选择&lt;/li&gt; &lt;li&gt;数据链路层(网桥交换机) -&amp;gt; 在物理层上建立,撤销,标志逻辑连接和链路复用以及差错校验等功能,通过使用接受系统的硬件地址或者物理地址来寻址&lt;/li&gt; &lt;li&gt;物理层 -&amp;gt; 建立,维护,取消物理连接&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;tcpip-四层模型&quot;&gt;TCP/IP 四层模型&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;应用层(数据段) : 相当于应用层,表示层,会话层,常用协议:HTTP,FTP,DNS,Telnet等&lt;/li&gt; &lt;li&gt;传输层(数据包) : 相当于传输层,常用协议有TCP,UDP&lt;/li&gt; &lt;li&gt;网络互联层(数据帧) : 相当于网络层,常用协议有IP(网络层核心),ICMP(网络层补充),ARP(已知ip获取mac),RARP(通过mac地址获取ip)&lt;/li&gt; &lt;li&gt;传输层(比特) : 相当于物理层,数据链路层&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;mac地址&quot;&gt;MAC地址&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;定义: 媒体访问控制,或称为物理地址,硬件地址,用来定义网络设备的位置。在OSI模型中，第三层网络层负责IP地址，第二层数据链路层负责MAC地址。&lt;/li&gt; &lt;li&gt;作用：就好像人的身份证一样，要用这个跟ip地址一一对应工作&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;arp地址解析协议&quot;&gt;ARP地址解析协议&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;作用：根据ip地址获取物理地址。&lt;/li&gt; &lt;li&gt;过程：主机发送信息时将包含目标ip地址的ARP请求广播到网络上的所有计算机，并接受返回消息，存入自己的ARP表。&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;crc冗余校验算法反码和校验算法&quot;&gt;CRC冗余校验算法，反码和校验算法&lt;/h1&gt; &lt;p&gt;原理：将原码左移n位，除以生成多项式，得到校验码。&lt;/p&gt; &lt;h1 id=&quot;透明传输&quot;&gt;透明传输&lt;/h1&gt; &lt;p&gt;定义：不管过程的传输。&lt;/p&gt;...</description>
        <pubDate>Fri, 07 Apr 2017 20:54:43 +0800</pubDate>
        <link>http://localhost:4000/network/</link>
        <guid isPermaLink="true">http://localhost:4000/network/</guid>
        
        <category>coding for fun</category>
        
        
        <category>Learn</category>
        
      </item>
    
      <item>
        <title>note of Data Structure</title>
        <description>&lt;h1 id=&quot;数据结构的定义&quot;&gt;数据结构的定义&lt;/h1&gt; &lt;p&gt;数据结构是计算机存储，组织数据的方式。数据结构是指相互之间存在一种或多种特定关系的数据元素的结合。&lt;/p&gt; &lt;h1 id=&quot;栈&quot;&gt;栈&lt;/h1&gt; &lt;p&gt;括号匹配，表达式计算&lt;/p&gt; &lt;h1 id=&quot;字符串匹配算法&quot;&gt;字符串匹配算法&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;KMP算法 next 与 nextval 的计算 如果j位置和k位置字符相等，则next[++j] = ++k; 不然跳回next[k]的位置在进行比较. ``` public static int[] getNext(String ps) { char[] strKey = ps.toCharArray(); int[] next = new int[strKey.length];&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;// 初始条件 int j = 0; int k = -1; next[0] = -1;&lt;/p&gt; &lt;p&gt;// 根据已知的前j位推测第j+1位 while (j &amp;lt; strKey.length - 1) { if (k == -1 || strKey[j] == strKey[k]) { next[++j] = ++k; } else { k = next[k]; } }&lt;/p&gt; &lt;p&gt;return next; }&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nextval数组的求解方法是：nextval[1]=0。从第二位开始，若要求nextval[i]，将next[i]的值对应的位的值与i的值进行比较（例如，第i为的值为'b'，next[i]=3,则将i的值'b'与第三位的值进行比较），若相等，nextval[i]=nextval【next[i]】（例，nextval[i]=nextval[3]）；若不相等，则nextval[i]=next[i]（例，nextval[i]=next[i]=3）。 &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;p&gt;int get_nextval(SString T,int &amp;amp;nextval[ ]){ //求模式串T的next函数修正值并存入数组nextval。 i=1; nextval[1]=0; j=0; while(i&amp;lt;T[0]){ if(j==0||T[i]==T[j]){ ++i;++j; if (T[i]!=T[j]) nextval[i]=j;...</description>
        <pubDate>Fri, 07 Apr 2017 20:54:43 +0800</pubDate>
        <link>http://localhost:4000/datastructure/</link>
        <guid isPermaLink="true">http://localhost:4000/datastructure/</guid>
        
        <category>coding for fun</category>
        
        
        <category>Learn</category>
        
      </item>
    
      <item>
        <title>note of Algorithm</title>
        <description>&lt;h1 id=&quot;算法的特征&quot;&gt;算法的特征&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;有穷性&lt;/li&gt; &lt;li&gt;确定性&lt;/li&gt; &lt;li&gt;输入输出&lt;/li&gt; &lt;li&gt;可行性 &lt;h1 id=&quot;算法复杂度的定义&quot;&gt;算法复杂度的定义&lt;/h1&gt; &lt;/li&gt; &lt;li&gt;大O 渐进上界&lt;/li&gt; &lt;li&gt;θ 同时满足渐进上界以及渐进下届&lt;/li&gt; &lt;li&gt;Ω 是渐进下界&lt;/li&gt; &lt;li&gt;小o 非紧渐进上界 &lt;h1 id=&quot;递归算法&quot;&gt;递归算法&lt;/h1&gt; &lt;/li&gt; &lt;li&gt;定义 递归算法是把问题转化为规模缩小了的同类问题的子问题。然后递归调用函数（或过程）来表示问题的解。 一个过程(或函数)直接或间接调用自己本身,这种过程(或函数)叫递归过程(或函数).&lt;/li&gt; &lt;li&gt;要求 每次调用规模有所缩小 相邻两次重复之间有紧密的联系，前一次腰围后一次做准备。 在规模极小时直接给出答案而不进行递归。&lt;/li&gt; &lt;li&gt;两个要素 终止条件以及递推关系。 &lt;h1 id=&quot;分治算法的思想&quot;&gt;分治算法的思想&lt;/h1&gt; &lt;p&gt;基本思想是将一个规模为n的问题分解为k个规模较小的子问题，这些字问题互相独立且与原问题相同。递归的解决这些字问题，然后将各子问题的解合并的到原问题的解。&lt;/p&gt; &lt;h1 id=&quot;-全排列&quot;&gt;# 全排列&lt;/h1&gt; &lt;p&gt;分治：将a[1…k]拆分为a[1…k-1]与a[k]； 解决：求a[1…k-1]的全排列 合并：将a[1…k-1]的全排列与a[k]组合；&lt;/p&gt; &lt;h1 id=&quot;-二分搜索&quot;&gt;# 二分搜索&lt;/h1&gt; &lt;p&gt;分治：将a[1…k]拆分为相同的两半,a[1…k/2],a[k/2…k]； 解决：与中间的元素进行对比，小于则在左边寻找，大于在右边寻找 合并：&lt;/p&gt; &lt;h1 id=&quot;-归并排序&quot;&gt;# 归并排序&lt;/h1&gt; &lt;p&gt;分治：将待排元素分成大小大致相同的两个子集合 解决：分别对两个子集合进行排序 合并：合并子集合&lt;/p&gt; &lt;h1 id=&quot;-快速排序&quot;&gt;# 快速排序&lt;/h1&gt; &lt;p&gt;分治：将待排元素分成大小大致相同的两个集合 解决：将比k大的元素放在k右边，将比k小的放在k左边 合并： 代码：&lt;/p&gt; &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void Qsort(int a[],int low,int high) { if(low &amp;gt;= high) return; int first = low; int last = high; int key = a[first]; while(first &amp;lt; last) { while(first &amp;lt; last &amp;amp;&amp;amp; a[last] &amp;gt;= key) { last--; } a[first] = a[last]; while(first...</description>
        <pubDate>Fri, 07 Apr 2017 20:54:43 +0800</pubDate>
        <link>http://localhost:4000/algorithm/</link>
        <guid isPermaLink="true">http://localhost:4000/algorithm/</guid>
        
        <category>coding for fun</category>
        
        
        <category>Learn</category>
        
      </item>
    
      <item>
        <title>腾讯笔经</title>
        <description>&lt;p&gt;因为面试完刚好到了offer发放的最后时间，所以只拿了口头offer，还是做个笔试比较保险一点= =
选择题太难了，主要说说大题&lt;/p&gt;
&lt;h1 id=&quot;一&quot;&gt;一&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;文件F具有10000个记录，每个记录50字节，其中10字节表示文件键值，每个磁盘块大小为1000字节，指向磁盘块的指针占5字节，不允许记录跨越两个块。 
  1）建立简单hash索引，使用100个hash桶，则桶目录需要多少磁盘块？平均每个桶需要多少个磁盘块？ 
  2）建立B+索引树，各磁盘块尽量装满，需要多少磁盘块存储索引？
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;第一个分为100个哈希桶，则每个桶100个记录即可，第一问比较简单。&lt;/li&gt;
  &lt;li&gt;第二问比较难，当时还想了很久树的秩怎么算，最后得出的不等式应该是5D + 10(D-1) &amp;lt;= 1000，因为b+树最后的叶子结点跟b树一样，不能装满，所以是10*(d-1)，解的d为67，然后就很好解了。
    &lt;h1 id=&quot;二&quot;&gt;二&lt;/h1&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;给出一个字符串，求逆序对 O(n)复杂度，字符串只会出现ABCD
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;这题最先的想法是用归并排序时计算逆序对，但是因为归并排序的复杂对最小是O(nlogn)，所以这题没有做了，最后跟同学交流，应该是扫描一遍，用数组存当前位置BCD出现的次数，出现A就加上BCD的次数，出现B就加上CD的次数，复杂度O(n)。
    &lt;h1 id=&quot;三-字符串处理函数很简单&quot;&gt;三 字符串处理函数，很简单。&lt;/h1&gt;
    &lt;h1 id=&quot;四&quot;&gt;四&lt;/h1&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入K，是一个满二叉搜索树，输入三个结点，求最近公共祖先结点。
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;因为是二叉排序树，所以用二分查找即可，如果三个结点出现在根节点的左右，则这个根就是最近的公共祖先结点。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 05 Apr 2017 05:23:31 +0800</pubDate>
        <link>http://localhost:4000/testoftx/</link>
        <guid isPermaLink="true">http://localhost:4000/testoftx/</guid>
        
        <category>Experience</category>
        
        
        <category>Experience</category>
        
      </item>
    
      <item>
        <title>Half month in Leetcode</title>
        <description>&lt;h1 id=&quot;1&quot;&gt;1&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;问题描述 ：删除一个数组内某个字符 不能另开空间，返回数组长度。 &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Solution { public: int removeElement(vector&amp;lt;int&amp;gt;&amp;amp; nums, int val) { int i = 0; int j = 0; int size = nums.size(); for(;i &amp;lt; size;i++) { if(nums[i] == val) continue; nums[j] = nums[i]; j++; } return j; } }; &lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;h1 id=&quot;2&quot;&gt;2&lt;/h1&gt; &lt;/li&gt; &lt;li&gt;已经排序好的一个数组&lt;/li&gt; &lt;li&gt;因为已经排序，所以每次找到后一个跟他不一样的数字即可。 &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Solution { public: int removeDuplicates(vector&amp;lt;int&amp;gt;&amp;amp; nums) { int i = 0; int j = 0; int n = nums.size(); if(n &amp;lt; 2) return n; for(i = j + 1;i &amp;lt; n;i++) { if(nums[i] == nums[j]) continue; nums[++j] = nums[i]; } return j+1; }...</description>
        <pubDate>Wed, 29 Mar 2017 08:33:31 +0800</pubDate>
        <link>http://localhost:4000/coding/</link>
        <guid isPermaLink="true">http://localhost:4000/coding/</guid>
        
        <category>coding for fun</category>
        
        
        <category>Learn</category>
        
      </item>
    
  </channel>
</rss>
